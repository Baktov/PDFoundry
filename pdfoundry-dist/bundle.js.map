{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/module/api/PDFoundryAPI.ts","src/module/app/PDFItemSheet.ts","src/module/cache/PDFCache.ts","src/module/main.ts","src/module/settings/PDFLocalization.ts","src/module/settings/PDFSettings.ts","src/module/viewer/PDFViewerBase.ts","src/module/viewer/PDFViewerWeb.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFViewerWeb } from '../viewer/PDFViewerWeb';\r\n\r\nexport class PDFoundryAPIError extends Error {\r\n    constructor(message?: string) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n/**\r\n * All the properties of a PDF that can be specified by a user\r\n */\r\nexport type PDFData = {\r\n    code: string;\r\n    url: string;\r\n    offset: number;\r\n    cache: boolean;\r\n};\r\n\r\nexport class PDFoundryAPI {\r\n    /**\r\n     * Register your system with the API.\r\n     * @param system The module YOU are calling this from.\r\n     */\r\n    public static async registerSystem(system: string) {\r\n        PDFSettings.EXTERNAL_SYSTEM_NAME = system;\r\n    }\r\n\r\n    /**\r\n     * Get an object containing the user specified PDF data for a specific PDF code.\r\n     * @param code\r\n     */\r\n    public static getPDFData(code: string): null | PDFData {\r\n        const entity = game.items.find((item) => {\r\n            return item.data.type === PDFSettings.PDF_ENTITY_TYPE && item.data.data.code === code;\r\n        });\r\n        if (entity === undefined || entity === null) {\r\n            return null;\r\n        }\r\n\r\n        const data = entity.data.data;\r\n        if (data.offset === '') {\r\n            data.offset = 0;\r\n        }\r\n        data.offset = parseInt(data.offset);\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Open a PDF by code to the specified page.\r\n     * @param code\r\n     * @param page\r\n     */\r\n    public static open(code: string, page: number = 1) {\r\n        const pdf = this.getPDFData(code);\r\n        if (pdf === null) {\r\n            throw new PDFoundryAPIError(`Unable to find a PDF with the code \"${code}. Did the user declare it?`);\r\n        }\r\n\r\n        const { url, offset } = pdf;\r\n        // coerce to number; safety first\r\n        page = offset + parseInt(page.toString());\r\n\r\n        this.openURL(`${window.origin}/${url}`, page);\r\n    }\r\n\r\n    /**\r\n     * Open a PDF by URL to the specified page.\r\n     * @param url\r\n     * @param page\r\n     */\r\n    public static openURL(url: string, page: number = 1) {\r\n        if (url === undefined) {\r\n            throw new PDFoundryAPIError('Unable to open PDF; \"url\" must be defined');\r\n        }\r\n\r\n        // coerce to number; safety first\r\n        page = parseInt(page.toString());\r\n        if (isNaN(page) || page <= 0) {\r\n            throw new PDFoundryAPIError(`Page must be > 0 but ${page} was given.`);\r\n        }\r\n\r\n        new PDFViewerWeb(url, page).render(true);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFoundryAPI } from '../api/PDFoundryAPI';\r\n/**\r\n * Extends the base ItemSheet for linked PDF viewing.\r\n */\r\nexport class PDFSourceSheet extends ItemSheet {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['sheet', 'item'];\r\n        options.width = 650;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    get template() {\r\n        return `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/templates/pdf-sheet.html`;\r\n    }\r\n\r\n    /**\r\n     * Helper method to get a id in the html form\r\n     * html ids are prepended with the id of the item to preserve uniqueness\r\n     *  which is mandatory to allow multiple forms to be open\r\n     * @param html\r\n     * @param id\r\n     */\r\n    private getByID(html: JQuery<HTMLElement>, id: string) {\r\n        return html.parent().parent().find(`#${this.item._id}-${id}`);\r\n    }\r\n\r\n    protected activateListeners(html: JQuery<HTMLElement>): void {\r\n        super.activateListeners(html);\r\n\r\n        this.addGithubLink(html);\r\n\r\n        const urlInput = this.getByID(html, 'data\\\\.url');\r\n        const offsetInput = this.getByID(html, 'data\\\\.offset');\r\n\r\n        // Block enter from displaying the PDF\r\n        html.find('input').on('keypress', function (event) {\r\n            if (event.key === 'Enter') {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        console.log(this.getByID(html, 'pdf-test'));\r\n\r\n        // Test button\r\n        this.getByID(html, 'pdf-test').on('click', function (event) {\r\n            event.preventDefault();\r\n\r\n            let urlValue = urlInput.val();\r\n            let offsetValue = offsetInput.val();\r\n\r\n            if (urlValue === null || urlValue === undefined) return;\r\n            if (offsetValue === null || offsetValue === undefined) return;\r\n\r\n            urlValue = `${window.location.origin}/${urlValue}`;\r\n\r\n            if (offsetValue.toString().trim() === '') {\r\n                offsetValue = 0;\r\n            }\r\n            offsetValue = parseInt(offsetValue as string);\r\n\r\n            PDFoundryAPI.openURL(urlValue, 5 + offsetValue);\r\n        });\r\n\r\n        // Browse button\r\n        this.getByID(html, 'pdf-browse').on('click', async function (event) {\r\n            event.preventDefault();\r\n\r\n            const fp = new FilePicker({});\r\n            // @ts-ignore TODO: foundry-pc-types\r\n            fp.extensions = ['.pdf'];\r\n            fp.field = urlInput[0];\r\n\r\n            let urlValue = urlInput.val();\r\n            if (urlValue !== undefined) {\r\n                await fp.browse(urlValue.toString().trim());\r\n            }\r\n\r\n            fp.render(true);\r\n        });\r\n    }\r\n\r\n    protected addGithubLink(html: JQuery<HTMLElement>) {\r\n        const h4 = html.parent().parent().find('header.window-header h4.window-title');\r\n        const next = h4.next()[0].childNodes[1].textContent;\r\n        if (next && next.trim() === 'PDFoundry') {\r\n            return;\r\n        }\r\n\r\n        const url = 'https://github.com/Djphoenix719/PDFoundry';\r\n        const style = 'text-decoration: none';\r\n        const icon = '<i class=\"fas fa-external-link-alt\"></i>';\r\n        const link = $(`<a style=\"${style}\" href=\"${url}\">${icon} PDFoundry</a>`);\r\n\r\n        h4.after(link);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { PDFViewerBase } from '../viewer/PDFViewerBase';\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\n\r\n/**\r\n * An error thrown when a caching operation fails.\r\n */\r\nexport class PDFCacheError extends Error {\r\n    constructor(message?: string) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n/**\r\n * Handles caching for PDFs\r\n */\r\nexport class PDFCache {\r\n    // <editor-fold desc=\"Static Properties\">\r\n    /**\r\n     * Max size of the cache, defaults to 256 MB.\r\n     */\r\n    public static MAX_BYTES: number = 256 * 2 ** 20;\r\n\r\n    private static readonly IDB_NAME: string = PDFSettings.INTERNAL_MODULE_NAME;\r\n    private static readonly IDB_VERSION: number = 1;\r\n    private static readonly IDB_STORE_NAME: string = `Cache`;\r\n\r\n    private static _idb: IDBDatabase;\r\n    // </editor-fold>\r\n\r\n    // <editor-fold desc=\"'Shims'\">\r\n    /**\r\n     * Helper to standardize IndexDB...\r\n     * https://xkcd.com/927/\r\n     */\r\n    private static get IDBFactory(): IDBFactory {\r\n        // @ts-ignore\r\n        return window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;\r\n    }\r\n\r\n    /**\r\n     * Helper to standardize idbTransaction...\r\n     * https://xkcd.com/927/\r\n     */\r\n    private static get IDBTransaction(): IDBTransaction {\r\n        // @ts-ignore\r\n        return window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction;\r\n    }\r\n    // </editor-fold>\r\n\r\n    /**\r\n     * Helper to get a new transaction\r\n     */\r\n    private static getTransaction() {\r\n        return this._idb.transaction(PDFCache.IDB_STORE_NAME, 'readwrite');\r\n    }\r\n\r\n    /**\r\n     * Helper to get the store for a transaction, reduces boilerplate.\r\n     * @param transaction The transaction to fetch the store for\r\n     */\r\n    private static getStore(transaction: IDBTransaction) {\r\n        return transaction.objectStore(PDFCache.IDB_STORE_NAME);\r\n    }\r\n\r\n    /**\r\n     * Commit the value to a specified key in the indexed db\r\n     * @param key The key to use as an index\r\n     * @param data The data to insert\r\n     * @param force If true, will delete an existing object at the specified key,\r\n     *  if one exists. Defaults to false.\r\n     */\r\n    public static async commit(key: IDBValidKey, data: Uint8Array, force: boolean = false): Promise<void> {\r\n        if (this._idb) {\r\n            let transaction = this.getTransaction();\r\n\r\n            // Propagate errors upwards, otherwise they fail silently\r\n            transaction.onerror = function (event) {\r\n                // @ts-ignore\r\n                throw event.target.error;\r\n            };\r\n\r\n            let store = this.getStore(transaction);\r\n            const keyRequest = store.getKey(key);\r\n            keyRequest.onsuccess = function (event) {\r\n                // if key exists in the store\r\n                if (keyRequest.result) {\r\n                    // should we force the new value by deleting the old?\r\n                    if (force) {\r\n                        PDFCache.delete(key).then(() => {\r\n                            // Deleting something will end our transaction\r\n                            // So we reacquire a new transaction\r\n                            transaction = PDFCache.getTransaction();\r\n                            store = PDFCache.getStore(transaction);\r\n\r\n                            store.add(data, key);\r\n                        });\r\n                    } else {\r\n                        throw new PDFCacheError(`Error in commit, ${key} already exists`);\r\n                    }\r\n                } else {\r\n                    store.add(data, key);\r\n                }\r\n            };\r\n        } else {\r\n            throw new PDFCacheError('Error in commit, IDB not initialized');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete an object stored in the indexed db at the specified location\r\n     * @param key\r\n     */\r\n    public static delete(key: IDBValidKey): Promise<void> {\r\n        // This *should* be an async method because I use async everywhere else\r\n        // But I find this type of logic easier to interpret with a promise pattern\r\n        //   since the resolve/rejects happen inside callbacks\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                const transaction = this.getTransaction();\r\n                const store = this.getStore(transaction);\r\n\r\n                transaction.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n                transaction.oncomplete = function (event) {\r\n                    resolve();\r\n                };\r\n\r\n                store.delete(key);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear all cached files.\r\n     */\r\n    public static clear(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                const transaction = this.getTransaction();\r\n                const store = this.getStore(transaction);\r\n                const keys = store.getAllKeys();\r\n                keys.onsuccess = (result) => {\r\n                    const promises: Promise<void>[] = [];\r\n                    for (const key of keys.result) {\r\n                        promises.push(PDFCache.delete(key));\r\n                    }\r\n\r\n                    Promise.all(promises).then(() => {\r\n                        resolve();\r\n                    });\r\n                };\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static async initialize() {\r\n        //TODO: Handle errors\r\n        const request = PDFCache.IDBFactory.open(PDFCache.IDB_NAME, PDFCache.IDB_VERSION);\r\n        request.onsuccess = function (event) {\r\n            PDFCache._idb = this.result;\r\n            PDFCache.cache('modules/djs-data/sr5-books/Shadowrun - Assassins Primer.pdf');\r\n            PDFCache.cache('modules/djs-data/sr5-books/Shadowrun - Core Rulebook.pdf');\r\n            PDFCache.cache('modules/djs-data/sr5-books/Shadowrun - Run Faster.pdf');\r\n        };\r\n        request.onupgradeneeded = function (event) {\r\n            PDFCache._idb = this.result;\r\n            try {\r\n                // Create object store if it doesn't exist\r\n                PDFCache._idb.createObjectStore(PDFCache.IDB_STORE_NAME, {});\r\n            } catch (error) {\r\n                // Otherwise pass\r\n            }\r\n        };\r\n    }\r\n\r\n    public static async cache(source: PDFViewerBase | string) {\r\n        if (typeof source === 'string') {\r\n            return this._cacheURI(source);\r\n        } else {\r\n            return this._cacheViewer(source);\r\n        }\r\n    }\r\n\r\n    private static async _cacheURI(uri: string): Promise<boolean> {\r\n        const response = await fetch(uri);\r\n        const data = new Uint8Array(await response.arrayBuffer());\r\n        await PDFCache.commit(uri, data, true);\r\n        return true;\r\n    }\r\n\r\n    private static async _cacheViewer(viewer: PDFViewerBase): Promise<boolean> {\r\n        return Promise.reject();\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFoundryAPI } from './api/PDFoundryAPI';\r\nimport { PDFSettings } from './settings/PDFSettings';\r\nimport { PDFLocalization } from './settings/PDFLocalization';\r\nimport { PDFCache } from './cache/PDFCache';\r\n\r\nHooks.once('init', function () {\r\n    // @ts-ignore\r\n    ui.PDFoundry = PDFoundryAPI;\r\n});\r\nHooks.once('init', PDFSettings.registerSettings);\r\n\r\nHooks.once('ready', async function () {\r\n    await PDFLocalization.init();\r\n});\r\nHooks.once('ready', PDFSettings.registerPDFSheet);\r\nHooks.once('ready', PDFSettings.injectCSS);\r\n\r\nHooks.once('ready', () => {\r\n    let viewed = false;\r\n    try {\r\n        const help = game.settings.get(PDFSettings.INTERNAL_MODULE_NAME, 'help');\r\n        viewed = help.viewed;\r\n    } catch (error) {}\r\n\r\n    if (!viewed) {\r\n        PDFSettings.showHelp();\r\n    }\r\n});\r\n\r\nHooks.on('preCreateItem', PDFSettings.preCreateItem);\r\nHooks.on('getItemDirectoryEntryContext', PDFSettings.getItemContextOptions);\r\nHooks.on('renderSettings', PDFSettings.onRenderSettings);\r\n\r\n// Initialize PDF cache\r\nHooks.once('setup', PDFCache.initialize);\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from './PDFSettings';\r\n\r\n/**\r\n * Localization helper\r\n */\r\nexport class PDFLocalization {\r\n    /**\r\n     * Load the localization file for the user's language.\r\n     */\r\n    public static async init() {\r\n        const lang = game.i18n.lang;\r\n        // user's language path\r\n        const u_path = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/locale/${lang}/config.json`;\r\n        // english fallback path\r\n        const f_path = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/locale/en/config.json`;\r\n\r\n        let json;\r\n        try {\r\n            json = await $.getJSON(u_path);\r\n        } catch (error) {\r\n            // if no translation exits for the users locale the fallback\r\n            json = await $.getJSON(f_path);\r\n        }\r\n\r\n        for (const key of Object.keys(json)) {\r\n            game.i18n.translations[key] = json[key];\r\n        }\r\n\r\n        // setup the fallback as english so partial translations do not display keys\r\n        let fb_json = await $.getJSON(f_path);\r\n        for (const key of Object.keys(fb_json)) {\r\n            // @ts-ignore\r\n            game.i18n._fallback[key] = json[key];\r\n        }\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSourceSheet } from '../app/PDFItemSheet';\r\nimport { PDFoundryAPI } from '../api/PDFoundryAPI';\r\nimport { PDFLog } from '../log/PDFLog';\r\n\r\n/**\r\n * Internal settings and helper methods for PDFoundry.\r\n */\r\nexport class PDFSettings {\r\n    public static DIST_FOLDER: string = 'pdfoundry-dist';\r\n    public static EXTERNAL_SYSTEM_NAME: string = '../modules/pdfoundry';\r\n    public static INTERNAL_MODULE_NAME: string = 'PDFoundry';\r\n    public static PDF_ENTITY_TYPE: string = 'PDFoundry_PDF';\r\n\r\n    /**\r\n     * Register the PDF sheet and unregister invalid sheet types from it.\r\n     */\r\n    public static registerPDFSheet() {\r\n        //  static unregisterSheet(scope, sheetClass, {types=[]}={}) {\r\n        Items.unregisterSheet(PDFSettings.INTERNAL_MODULE_NAME, 'SR5ItemSheet', {\r\n            types: [PDFSettings.PDF_ENTITY_TYPE],\r\n        });\r\n        Items.registerSheet(PDFSettings.INTERNAL_MODULE_NAME, PDFSourceSheet, {\r\n            types: [PDFSettings.PDF_ENTITY_TYPE],\r\n            makeDefault: true,\r\n        });\r\n\r\n        // Unregister all other item sheets for the PDF entity\r\n        const pdfoundryKey = `${PDFSettings.INTERNAL_MODULE_NAME}.${PDFSourceSheet.name}`;\r\n        const sheets = CONFIG.Item.sheetClasses[PDFSettings.PDF_ENTITY_TYPE];\r\n        for (const key of Object.keys(sheets)) {\r\n            const sheet = sheets[key];\r\n            // keep the PDFoundry sheet\r\n            if (sheet.id === pdfoundryKey) {\r\n                continue;\r\n            }\r\n\r\n            // id is MODULE.CLASS_NAME\r\n            const [module] = sheet.id.split('.');\r\n            Items.unregisterSheet(module, sheet.cls, {\r\n                types: [PDFSettings.PDF_ENTITY_TYPE],\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup default values for pdf entities\r\n     * @param entity\r\n     * @param args ignored args\r\n     */\r\n    public static async preCreateItem(entity, ...args) {\r\n        if (entity.type !== PDFSettings.PDF_ENTITY_TYPE) {\r\n            return;\r\n        }\r\n        entity.img = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/assets/pdf_icon.svg`;\r\n    }\r\n\r\n    /**\r\n     * Helper method to grab the id from the html object and return an item\r\n     * @param html\r\n     */\r\n    private static getItemFromContext(html: JQuery<HTMLElement>): Item {\r\n        const id = html.data('entity-id');\r\n        return game.items.get(id);\r\n    }\r\n\r\n    /**\r\n     * Get additional context menu icons for PDF items\r\n     * @param html\r\n     * @param options\r\n     */\r\n    public static getItemContextOptions(html, options: any[]) {\r\n        options.splice(0, 0, {\r\n            name: game.i18n.localize('PDFOUNDRY.CONTEXT.OpenPDF'),\r\n            icon: '<i class=\"far fa-file-pdf\"></i>',\r\n            condition: (entityHtml: JQuery<HTMLElement>) => {\r\n                const item = PDFSettings.getItemFromContext(entityHtml);\r\n                if (item.type !== PDFSettings.PDF_ENTITY_TYPE) {\r\n                    return false;\r\n                }\r\n\r\n                const { code, url } = item.data.data;\r\n                return code !== '' && url !== '';\r\n            },\r\n            callback: (entityHtml: JQuery<HTMLElement>) => {\r\n                const item = PDFSettings.getItemFromContext(entityHtml);\r\n                const { code } = item.data.data;\r\n                PDFoundryAPI.open(code);\r\n            },\r\n        });\r\n    }\r\n\r\n    public static injectCSS() {\r\n        $('head').append(\r\n            $(`<link href=\"systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/bundle.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\">`),\r\n        );\r\n    }\r\n\r\n    public static registerSettings() {\r\n        // Has an individual user viewed the manual yet?\r\n        game.settings.register(PDFSettings.INTERNAL_MODULE_NAME, 'help', {\r\n            viewed: false,\r\n            scope: 'user',\r\n        });\r\n    }\r\n\r\n    public static onRenderSettings(settings: any, html: JQuery<HTMLElement>, data: any) {\r\n        const icon = '<i class=\"far fa-file-pdf\"></i>';\r\n        const button = $(`<button>${icon} ${game.i18n.localize('PDFOUNDRY.SETTINGS.OpenHelp')}</button>`);\r\n        button.on('click', PDFSettings.showHelp);\r\n\r\n        html.find('h2').last().before(button);\r\n    }\r\n\r\n    public static async showHelp() {\r\n        await game.settings.set(PDFSettings.INTERNAL_MODULE_NAME, 'help', {\r\n            viewed: true,\r\n        });\r\n\r\n        PDFoundryAPI.openURL(`${window.origin}/systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/assets/PDFoundry Manual.pdf`);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFCache } from '../cache/PDFCache';\r\n\r\nexport class PDFViewerBase extends Application {\r\n    protected _frame: HTMLIFrameElement;\r\n\r\n    public get app() {\r\n        // @ts-ignore\r\n        return this._frame.contentWindow.PDFViewerApplication;\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'pdf-viewer';\r\n        options.classes = ['app', 'window-app'];\r\n        options.title = 'View PDF';\r\n        options.width = 8.5 * 100 + 64;\r\n        options.height = 11 * 100 + 64;\r\n        options.resizable = true;\r\n        return options;\r\n    }\r\n\r\n    protected async activateListeners(html: JQuery<HTMLElement>): Promise<void> {\r\n        super.activateListeners(html);\r\n\r\n        this._frame = html.parents().find('iframe.pdfViewer').first().get(0) as HTMLIFrameElement;\r\n\r\n        // @ts-ignore\r\n        window.viewer = this;\r\n    }\r\n\r\n    /**\r\n     * Attempt to safely cleanup PDFjs to avoid memory leaks.\r\n     */\r\n    protected cleanup(): void {\r\n        if (this._frame && this._frame.contentWindow) {\r\n            const window = this._frame.contentWindow;\r\n            // @ts-ignore\r\n            window.PDFViewerApplication.cleanup();\r\n        }\r\n    }\r\n\r\n    close(): Promise<any> {\r\n        this.cleanup();\r\n        return super.close();\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFViewerBase } from './PDFViewerBase';\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\n\r\nexport class PDFViewerWeb extends PDFViewerBase {\r\n    private m_Page: number;\r\n    private m_FilePath: string;\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.template = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/pdfoundry-dist/templates/web-viewer-app.html`;\r\n        return options;\r\n    }\r\n\r\n    constructor(file: string, page: number) {\r\n        super();\r\n\r\n        this.m_FilePath = encodeURIComponent(file);\r\n        this.m_Page = page;\r\n    }\r\n\r\n    getData(options?: any): any | Promise<any> {\r\n        const data = super.getData(options);\r\n        data.page = this.m_Page;\r\n        data.filePath = this.m_FilePath;\r\n        data.systemName = PDFSettings.EXTERNAL_SYSTEM_NAME;\r\n        return data;\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}