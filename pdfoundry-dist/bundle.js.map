{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/module/api/PDFUtil.ts","src/module/api/PDFoundryAPI.ts","src/module/app/PDFItemSheet.ts","src/module/cache/PDFCache.ts","src/module/events/PDFEvents.ts","src/module/log/PDFLog.ts","src/module/main.ts","src/module/settings/PDFI18n.ts","src/module/settings/PDFSettings.ts","src/module/setup/PDFSetup.ts","src/module/socket/PDFSocketHandler.ts","src/module/socket/events/PDFPreloadEvent.ts","src/module/socket/events/PDFSetViewEvent.ts","src/module/socket/events/PDFSocketEvent.ts","src/module/viewer/PDFViewer.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFData } from '../types/PDFData';\r\nimport { PDFLog } from '../log/PDFLog';\r\n\r\n/**\r\n * Contains various utility functions for common operations.\r\n */\r\nexport class PDFUtil {\r\n    /**\r\n     * Helper method. Convert a relative URL to a absolute URL\r\n     *  by prepending the window origin to the relative URL.\r\n     * @param dataUrl\r\n     */\r\n    public static getAbsoluteURL(dataUrl: string): string {\r\n        return `${window.origin}/${dataUrl}`;\r\n    }\r\n\r\n    /**\r\n     * Pull relevant data from an item, creating a {@link PDFData}.\r\n     * @param item The item to pull data from.\r\n     */\r\n    public static getPDFDataFromItem(item: Item): PDFData | null {\r\n        if (item === undefined || item === null) {\r\n            return null;\r\n        }\r\n\r\n        let { code, url, offset, cache } = item.data.data;\r\n        let name = item.name;\r\n\r\n        if (typeof offset === 'string') {\r\n            offset = parseInt(offset);\r\n        }\r\n\r\n        return {\r\n            name,\r\n            code,\r\n            url,\r\n            offset,\r\n            cache,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns true if the URL starts with the origin.\r\n     * @param dataUrl A url.\r\n     */\r\n    public static validateAbsoluteURL(dataUrl: string): boolean {\r\n        return dataUrl.startsWith(window.origin);\r\n    }\r\n\r\n    public static getUserIdsOfRole(role: number) {\r\n        return game.users\r\n            .filter((user) => {\r\n                return user.role === role;\r\n            })\r\n            .map((user) => user.id);\r\n    }\r\n\r\n    public static getUserIdsAtLeastRole(role: number) {\r\n        return game.users\r\n            .filter((user) => {\r\n                return user.role >= role;\r\n            })\r\n            .map((user) => user.id);\r\n    }\r\n\r\n    public static getUserIdsAtMostRole(role: number) {\r\n        return game.users\r\n            .filter((user) => {\r\n                return user.role <= role;\r\n            })\r\n            .map((user) => user.id);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFViewer } from '../viewer/PDFViewer';\r\nimport { PDFCache } from '../cache/PDFCache';\r\nimport { PDFEvents } from '../events/PDFEvents';\r\nimport { PDFUtil } from './PDFUtil';\r\nimport { PDFData } from '../types/PDFData';\r\n\r\ntype ItemComparer = (item: Item) => boolean;\r\n\r\n/**\r\n * The PDFoundry API <br>\r\n * You can access the API with `ui.PDFoundry`\r\n * @module API\r\n */\r\nexport class PDFoundryAPI {\r\n    /**\r\n     * A reference to the static {@link PDFEvents} class.\r\n     */\r\n    public static get events() {\r\n        return PDFEvents;\r\n    }\r\n\r\n    /**\r\n     * A reference to the static {@link PDFUtil} class.\r\n     */\r\n    public static get util() {\r\n        return PDFUtil;\r\n    }\r\n\r\n    // <editor-fold desc=\"GetPDFData Methods\">\r\n\r\n    /**\r\n     * Helper method. Alias for {@link PDFoundryAPI.getPDFData} with a\r\n     *  comparer that searches by PDF Code.\r\n     * @param code Which code to search for a PDF with.\r\n     */\r\n    public static getPDFDataByCode(code: string): PDFData | null {\r\n        return PDFoundryAPI.getPDFData((item) => {\r\n            return item.data.data.code === code;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper method. Alias for {@link PDFoundryAPI.getPDFData} with a\r\n     *  comparer that searches by PDF Name.\r\n     * @param name Which name to search for a PDF with.\r\n     * @param caseInsensitive If a case insensitive search should be done.\r\n     */\r\n    public static getPDFDataByName(name: string, caseInsensitive: boolean = true): PDFData | null {\r\n        if (caseInsensitive) {\r\n            return PDFoundryAPI.getPDFData((item) => {\r\n                return item.name.toLowerCase() === name.toLowerCase();\r\n            });\r\n        } else {\r\n            return PDFoundryAPI.getPDFData((item) => {\r\n                return item.name === name;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds a PDF entity created by the user and constructs a\r\n     *  {@link PDFData} object of the resulting PDF's data.\r\n     * @param comparer A comparison function that will be used.\r\n     */\r\n    public static getPDFData(comparer: ItemComparer): PDFData | null {\r\n        const pdf: Item = game.items.find((item: Item) => {\r\n            return item.type === PDFSettings.PDF_ENTITY_TYPE && comparer(item);\r\n        });\r\n\r\n        return PDFUtil.getPDFDataFromItem(pdf);\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    // <editor-fold desc=\"OpenPDF Methods\">\r\n\r\n    /**\r\n     * Open the PDF with the provided code to the specified page.\r\n     * Helper for {@link getPDFDataByCode} then {@link openPDF}.\r\n     */\r\n    public static async openPDFByCode(code: string, page: number = 1) {\r\n        const pdf = this.getPDFDataByCode(code);\r\n\r\n        if (pdf === null) {\r\n            const error = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithCode');\r\n\r\n            if (PDFSettings.NOTIFICATIONS) {\r\n                ui.notifications.error(error);\r\n            }\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return this.openPDF(pdf, page);\r\n    }\r\n\r\n    /**\r\n     * Open the PDF with the provided code to the specified page.\r\n     * Helper for {@link getPDFDataByCode} then {@link openPDF}.\r\n     */\r\n    public static async openPDFByName(name: string, page: number = 1) {\r\n        const pdf = this.getPDFDataByName(name);\r\n\r\n        if (pdf === null) {\r\n            const message = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithName');\r\n            const error = new Error(message);\r\n\r\n            if (PDFSettings.NOTIFICATIONS) {\r\n                ui.notifications.error(error.message);\r\n            }\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return this.openPDF(pdf, page);\r\n    }\r\n\r\n    /**\r\n     * Open the provided {@link PDFData} to the specified page.\r\n     * @param pdf The PDF to open. See {@link PDFoundryAPI.getPDFData}.\r\n     * @param page The page to open the PDF to.\r\n     */\r\n    public static async openPDF(pdf: PDFData, page: number = 1) {\r\n        let { url, offset, cache } = pdf;\r\n\r\n        if (typeof offset === 'string') {\r\n            offset = parseInt(offset);\r\n        }\r\n\r\n        if (!PDFUtil.validateAbsoluteURL(url)) {\r\n            url = PDFUtil.getAbsoluteURL(url);\r\n        }\r\n\r\n        const viewer = new PDFViewer(pdf);\r\n        viewer.render(true);\r\n\r\n        await PDFoundryAPI._handleOpen(viewer, url, page + offset, cache);\r\n\r\n        return viewer;\r\n    }\r\n\r\n    /**\r\n     * Open a URL as a PDF.\r\n     * @param url The URL to open (must be absolute).\r\n     * @param page Which page to open to. Must be >= 1.\r\n     * @param cache If URL based caching should be used.\r\n     */\r\n    public static async openURL(url: string, page: number = 1, cache: boolean = true): Promise<PDFViewer> {\r\n        if (isNaN(page) || page <= 0) {\r\n            throw new Error(`Page must be > 0, but ${page} was given.`);\r\n        }\r\n\r\n        if (!PDFUtil.validateAbsoluteURL(url)) {\r\n            url = PDFUtil.getAbsoluteURL(url);\r\n        }\r\n\r\n        const viewer = new PDFViewer();\r\n        viewer.render(true);\r\n\r\n        await PDFoundryAPI._handleOpen(viewer, url, page, cache);\r\n\r\n        return viewer;\r\n    }\r\n\r\n    private static async _handleOpen(viewer: PDFViewer, url: string, page: number, cache: boolean) {\r\n        if (cache) {\r\n            const cachedBytes = await PDFCache.getCache(url);\r\n            // If we have a cache hit open the cached data\r\n            if (cachedBytes) {\r\n                await viewer.open(cachedBytes, page);\r\n            } else {\r\n                // Otherwise we should open it by url\r\n                await viewer.open(url, page);\r\n                // And when the download is complete set the cache\r\n                viewer.download().then((bytes) => {\r\n                    PDFCache.setCache(url, bytes);\r\n                });\r\n            }\r\n        } else {\r\n            await viewer.open(url, page);\r\n        }\r\n    }\r\n\r\n    // </editor-fold>\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFoundryAPI } from '../api/PDFoundryAPI';\r\nimport { PDFLog } from '../log/PDFLog';\r\n\r\n/**\r\n * Extends the base ItemSheet for linked PDF viewing.\r\n */\r\nexport class PDFItemSheet extends ItemSheet {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['sheet', 'item'];\r\n        options.width = 650;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    get template() {\r\n        return `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/templates/sheet/pdf-sheet.html`;\r\n    }\r\n\r\n    /**\r\n     * Helper method to get a id in the html form\r\n     * html ids are prepended with the id of the item to preserve uniqueness\r\n     *  which is mandatory to allow multiple forms to be open\r\n     * @param html\r\n     * @param id\r\n     */\r\n    private _getByID(html: JQuery<HTMLElement>, id: string): JQuery<HTMLElement> {\r\n        return html.parent().parent().find(`#${this.item._id}-${id}`);\r\n    }\r\n\r\n    protected _getHeaderButtons(): any[] {\r\n        const buttons = super._getHeaderButtons();\r\n        buttons.unshift({\r\n            class: 'pdf-sheet-manual',\r\n            icon: 'fas fa-question-circle',\r\n            label: 'Help',\r\n            onclick: () => PDFSettings.showHelp(),\r\n        });\r\n        //TODO: Standardize this to function w/ the Viewer one\r\n        buttons.unshift({\r\n            class: 'pdf-sheet-github',\r\n            icon: 'fas fa-external-link-alt',\r\n            label: 'PDFoundry',\r\n            onclick: () => window.open('https://github.com/Djphoenix719/PDFoundry', '_blank'),\r\n        });\r\n        return buttons;\r\n    }\r\n\r\n    protected activateListeners(html: JQuery<HTMLElement>): void {\r\n        super.activateListeners(html);\r\n\r\n        const urlInput = this._getByID(html, 'data\\\\.url');\r\n        const offsetInput = this._getByID(html, 'data\\\\.offset');\r\n\r\n        // Block enter from displaying the PDF\r\n        html.find('input').on('keypress', function (event) {\r\n            if (event.key === 'Enter') {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        // Test button\r\n        this._getByID(html, 'pdf-test').on('click', function (event) {\r\n            event.preventDefault();\r\n\r\n            let urlValue = urlInput.val();\r\n            let offsetValue = offsetInput.val();\r\n\r\n            if (urlValue === null || urlValue === undefined) return;\r\n            if (offsetValue === null || offsetValue === undefined) return;\r\n\r\n            urlValue = `${window.location.origin}/${urlValue}`;\r\n\r\n            if (offsetValue.toString().trim() === '') {\r\n                offsetValue = 0;\r\n            }\r\n            offsetValue = parseInt(offsetValue as string);\r\n\r\n            PDFoundryAPI.openURL(urlValue, 5 + offsetValue, false);\r\n        });\r\n\r\n        // Browse button\r\n        this._getByID(html, 'pdf-browse').on('click', async function (event) {\r\n            event.preventDefault();\r\n\r\n            const fp = new FilePicker({});\r\n            // @ts-ignore TODO: foundry-pc-types\r\n            fp.extensions = ['.pdf'];\r\n            fp.field = urlInput[0];\r\n\r\n            let urlValue = urlInput.val();\r\n            if (urlValue !== undefined) {\r\n                await fp.browse(urlValue.toString().trim());\r\n            }\r\n\r\n            fp.render(true);\r\n        });\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { PDFViewer } from '../viewer/PDFViewer';\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFLog } from '../log/PDFLog';\r\n\r\n/**\r\n * Error that occurs during IDB operations\r\n */\r\nexport class IDBHelperError extends Error {\r\n    constructor(index: string, store: string, message?: string) {\r\n        super(`Error in ${index}>${store}: ${message}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Class that deals with getting/setting from an indexed db\r\n * Mostly exists to separate logic for the PDFCache from logic\r\n *  dealing with the database\r\n */\r\nclass IDBHelper {\r\n    private _version: number;\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _storeNames: string[];\r\n\r\n    private _db: IDBDatabase;\r\n\r\n    public static async createAndOpen(indexName: string, storeNames: string[], version: number) {\r\n        const helper = new IDBHelper(indexName, storeNames, version);\r\n        await helper.open();\r\n        return helper;\r\n    }\r\n\r\n    public get ready() {\r\n        return this._db !== undefined;\r\n    }\r\n\r\n    public constructor(indexName: string, storeNames: string[], version: number) {\r\n        this._indexName = `${indexName}`;\r\n        this._storeNames = storeNames;\r\n        this._version = version;\r\n    }\r\n\r\n    private newTransaction(storeName: string) {\r\n        const transaction = this._db.transaction(storeName, 'readwrite');\r\n        const store = transaction.objectStore(storeName);\r\n        return { transaction, store };\r\n    }\r\n\r\n    public open(): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function (resolve, reject) {\r\n            const request = indexedDB.open(that._indexName, that._version);\r\n            request.onsuccess = function (event) {\r\n                that._db = this.result;\r\n                resolve();\r\n            };\r\n            request.onupgradeneeded = function (event) {\r\n                that._db = this.result;\r\n                for (let i = 0; i < that._storeNames.length; i++) {\r\n                    try {\r\n                        // Create object store if it doesn't exist\r\n                        that._db.createObjectStore(that._storeNames[i], {});\r\n                    } catch (error) {\r\n                        // Otherwise pass\r\n                    }\r\n                }\r\n                resolve();\r\n            };\r\n            request.onerror = function (event) {\r\n                // @ts-ignore\r\n                reject(event.target.error);\r\n            };\r\n        });\r\n    }\r\n\r\n    public set(key: IDBValidKey, value: any, storeName: string, force: boolean = false): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (!this._db) {\r\n                throw new IDBHelperError(this._indexName, storeName, 'Database is not initialized.');\r\n            } else {\r\n                const that = this;\r\n                let { transaction, store } = this.newTransaction(storeName);\r\n\r\n                // Propagate errors upwards, otherwise they fail silently\r\n                transaction.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n\r\n                const keyRequest = store.getKey(key);\r\n                keyRequest.onsuccess = function (event) {\r\n                    // key already exists in the store\r\n                    if (keyRequest.result) {\r\n                        // should we force the new value by deleting the old?\r\n                        if (force) {\r\n                            that.del(key, storeName).then(() => {\r\n                                ({ transaction, store } = that.newTransaction(storeName));\r\n                                store.add(value, key);\r\n                                resolve();\r\n                            });\r\n                        } else {\r\n                            throw new IDBHelperError(that._indexName, storeName, `Key ${key} already exists.`);\r\n                        }\r\n                    } else {\r\n                        store.add(value, key);\r\n                        resolve();\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public get(key: IDBValidKey, storeName: string): Promise<any> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (!this._db) {\r\n                throw new IDBHelperError(this._indexName, storeName, 'Database is not initialized.');\r\n            } else {\r\n                let { transaction, store } = this.newTransaction(storeName);\r\n\r\n                // Propagate errors upwards, otherwise they fail silently\r\n                transaction.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n\r\n                const getRequest = store.get(key);\r\n                getRequest.onsuccess = function (event) {\r\n                    resolve(this.result);\r\n                };\r\n\r\n                getRequest.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public del(key: IDBValidKey, storeName: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                const { transaction, store } = this.newTransaction(storeName);\r\n\r\n                transaction.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n                transaction.oncomplete = function (event) {\r\n                    resolve();\r\n                };\r\n\r\n                store.delete(key);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public keys(storeName: string): Promise<IDBValidKey[]> {\r\n        return new Promise<IDBValidKey[]>((resolve, reject) => {\r\n            try {\r\n                const { transaction, store } = this.newTransaction(storeName);\r\n                const keysRequest = store.getAllKeys();\r\n\r\n                keysRequest.onsuccess = function () {\r\n                    resolve(keysRequest.result);\r\n                };\r\n                keysRequest.onerror = function (event) {\r\n                    // @ts-ignore\r\n                    reject(event.target.error);\r\n                };\r\n\r\n                return;\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public clr(storeName: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                const { store } = this.newTransaction(storeName);\r\n                const keys = store.getAllKeys();\r\n                keys.onsuccess = (result) => {\r\n                    const promises: Promise<void>[] = [];\r\n                    for (const key of keys.result) {\r\n                        promises.push(this.del(key, storeName));\r\n                    }\r\n                    Promise.all(promises).then(() => {\r\n                        resolve();\r\n                    });\r\n                };\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Meta information about a cache entry\r\n */\r\ntype CacheMeta = {\r\n    size: number;\r\n    dateAccessed: string;\r\n};\r\n\r\n/**\r\n * Handles caching for PDFs\r\n */\r\nexport class PDFCache {\r\n    // <editor-fold desc=\"Static Properties\">\r\n    /**\r\n     * Max size of the cache, defaults to 256 MB.\r\n     */\r\n    public static get MAX_BYTES() {\r\n        return game.settings.get(PDFSettings.EXTERNAL_SYSTEM_NAME, 'CacheSize') * 2 ** 20;\r\n    }\r\n\r\n    private static readonly IDB_NAME: string = 'PDFoundry';\r\n    private static readonly IDB_VERSION: number = 1;\r\n\r\n    private static readonly CACHE: string = `Cache`;\r\n    private static readonly META: string = `Meta`;\r\n\r\n    private static _cacheHelper: IDBHelper;\r\n    // </editor-fold>\r\n\r\n    public static async initialize() {\r\n        PDFCache._cacheHelper = await IDBHelper.createAndOpen(PDFCache.IDB_NAME, [PDFCache.CACHE, PDFCache.META], PDFCache.IDB_VERSION);\r\n    }\r\n\r\n    public static async getMeta(key: string): Promise<CacheMeta | null> {\r\n        try {\r\n            return await PDFCache._cacheHelper.get(key, PDFCache.META);\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static async setMeta(key: string, meta: CacheMeta): Promise<void> {\r\n        await PDFCache._cacheHelper.set(key, meta, PDFCache.META, true);\r\n    }\r\n\r\n    public static async getCache(key: string): Promise<Uint8Array | null> {\r\n        try {\r\n            const bytes = await PDFCache._cacheHelper.get(key, PDFCache.CACHE);\r\n            const meta: CacheMeta = {\r\n                dateAccessed: new Date().toISOString(),\r\n                size: bytes.length,\r\n            };\r\n            await PDFCache.setMeta(key, meta);\r\n\r\n            return bytes;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static async setCache(key: string, bytes: Uint8Array) {\r\n        const meta: CacheMeta = {\r\n            dateAccessed: new Date().toISOString(),\r\n            size: bytes.length,\r\n        };\r\n\r\n        await PDFCache._cacheHelper.set(key, bytes, PDFCache.CACHE, true);\r\n        await PDFCache.setMeta(key, meta);\r\n        await this.prune();\r\n    }\r\n\r\n    public static preload(key: string): Promise<void> {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            const cachedBytes = await PDFCache.getCache(key);\r\n            if (cachedBytes !== null && cachedBytes.byteLength > 0) {\r\n                resolve();\r\n                return;\r\n            }\r\n\r\n            const response = await fetch(key);\r\n            if (response.ok) {\r\n                const fetchedBytes = new Uint8Array(await response.arrayBuffer());\r\n                if (fetchedBytes.byteLength > 0) {\r\n                    await PDFCache.setCache(key, fetchedBytes);\r\n                    resolve();\r\n                    return;\r\n                } else {\r\n                    reject('Fetch failed.');\r\n                }\r\n            } else {\r\n                reject('Fetch failed.');\r\n            }\r\n        });\r\n    }\r\n\r\n    private static async prune() {\r\n        const keys = await this._cacheHelper.keys(PDFCache.META);\r\n\r\n        let totalBytes = 0;\r\n        let metas: any[] = [];\r\n        for (const key of keys) {\r\n            const meta = await this._cacheHelper.get(key, PDFCache.META);\r\n            meta.dateAccessed = Date.parse(meta.dateAccessed);\r\n            meta.size = parseInt(meta.size);\r\n\r\n            totalBytes += meta.size;\r\n\r\n            metas.push({\r\n                key,\r\n                meta,\r\n            });\r\n        }\r\n\r\n        metas = metas.sort((a, b) => {\r\n            return a.meta.dateAccessed - b.meta.dateAccessed;\r\n        });\r\n\r\n        for (let i = 0; i < metas.length; i++) {\r\n            if (totalBytes < PDFCache.MAX_BYTES) {\r\n                break;\r\n            }\r\n\r\n            const next = metas[i];\r\n\r\n            await this._cacheHelper.del(next.key, PDFCache.META);\r\n            await this._cacheHelper.del(next.key, PDFCache.CACHE);\r\n\r\n            totalBytes -= next.meta.size;\r\n\r\n            PDFLog.warn(`Pruned ${next.meta.size} bytes by deleting ${next.key}`);\r\n        }\r\n    }\r\n\r\n    public static registerSettings() {\r\n        game.settings.register(PDFSettings.EXTERNAL_SYSTEM_NAME, 'CacheSize', {\r\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeName'),\r\n            scope: 'user',\r\n            type: Number,\r\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeHint'),\r\n            default: 256,\r\n            config: true,\r\n            onChange: async (mb) => {\r\n                mb = Math.round(mb);\r\n                mb = Math.max(mb, 64);\r\n                mb = Math.min(mb, 1024);\r\n                await game.settings.set(PDFSettings.EXTERNAL_SYSTEM_NAME, 'CacheSize', mb);\r\n            },\r\n        });\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFLog } from '../log/PDFLog';\r\n\r\ntype PDFSetupEvent = 'init' | 'setup' | 'ready';\r\n\r\ntype PDFViewerEvent = 'viewerOpen' | 'viewerClose' | 'viewerReady';\r\n\r\nexport type PDFEvent = PDFSetupEvent | PDFViewerEvent;\r\n\r\n/**\r\n * @private\r\n */\r\nclass EventStore {\r\n    private readonly _name: PDFEvent;\r\n    private readonly _callbacks: Function[];\r\n\r\n    constructor(name: PDFEvent) {\r\n        this._name = name;\r\n        this._callbacks = [];\r\n    }\r\n\r\n    /**\r\n     * Turn on an event callback for this event.\r\n     * @param callback The callback to turn on\r\n     */\r\n    public on(callback: Function) {\r\n        if (this._callbacks === undefined) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this._callbacks.length; i++) {\r\n            if (this._callbacks[i] === callback) return;\r\n        }\r\n\r\n        this._callbacks.push(callback);\r\n    }\r\n\r\n    /**\r\n     * Turn off an event callback for this event.\r\n     * @param callback The callback to turn off\r\n     */\r\n    public off(callback: Function) {\r\n        if (this._callbacks === undefined) {\r\n            return;\r\n        }\r\n\r\n        for (let i = this._callbacks.length; i >= 0; i--) {\r\n            if (this._callbacks[i] === callback) {\r\n                this._callbacks.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fire an event and forward the args to all handlers\r\n     * @param args Any arguments that should be passed to handlers\r\n     */\r\n    public fire(...args) {\r\n        if (PDFEvents.DEBUG) {\r\n            PDFLog.log(`<${this._name}>`);\r\n            console.log(args);\r\n        }\r\n\r\n        for (const cb of this._callbacks) {\r\n            cb(...args);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Tracks and publishes events for PDF related occurrences.\r\n * This class is callable through `ui.PDFoundry.events`\r\n */\r\nexport class PDFEvents {\r\n    /**\r\n     * Should every event call's event name and arguments be logged?\r\n     */\r\n    public static DEBUG: boolean = false;\r\n\r\n    private static _EVENTS = {\r\n        init: new EventStore('init'),\r\n        setup: new EventStore('setup'),\r\n        ready: new EventStore('ready'),\r\n\r\n        viewerOpen: new EventStore('viewerOpen'),\r\n        viewerClose: new EventStore('viewerClose'),\r\n        viewerReady: new EventStore('viewerReady'),\r\n    };\r\n\r\n    // <editor-fold desc=\"Setup & Initialization Events\">\r\n\r\n    /**\r\n     * Helper method version of {@link PDFEvents.on}\r\n     * Called when all PDFoundry init stage events are done.\r\n     */\r\n    public static get init() {\r\n        return PDFEvents._EVENTS['init'].on;\r\n    }\r\n\r\n    /**\r\n     * Helper method version of {@link PDFEvents.on}\r\n     * Called when all PDFoundry setup stage events are done.\r\n     */\r\n    public static get setup() {\r\n        return PDFEvents._EVENTS['setup'].on;\r\n    }\r\n\r\n    /**\r\n     * Helper method version of {@link PDFEvents.on}\r\n     * Called when all PDFoundry ready stage events are done.\r\n     */\r\n    public static get ready() {\r\n        return PDFEvents._EVENTS['ready'].on;\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    // <editor-fold desc=\"Viewer Events\">\r\n\r\n    /**\r\n     * Helper method version of {@link PDFEvents.on}\r\n     * Called when a PDF viewer begins opening\r\n     */\r\n    public static get viewerOpen() {\r\n        return PDFEvents._EVENTS['viewerOpen'].on;\r\n    }\r\n\r\n    /**\r\n     * Helper method version of {@link PDFEvents.on}\r\n     * Called when a PDF viewer begins closing\r\n     */\r\n    public static get viewerClose() {\r\n        return PDFEvents._EVENTS['viewerClose'].on;\r\n    }\r\n\r\n    /**\r\n     * Helper method version of {@link PDFEvents.on}\r\n     * Called when a PDF viewer is ready to use\r\n     */\r\n    public static get viewerReady() {\r\n        return PDFEvents._EVENTS['viewerReady'].on;\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    /**\r\n     * Like @see {@link PDFEvents.on} but fires the event only once, then calls off.\r\n     * @param event\r\n     * @param callback\r\n     */\r\n    public static once(event: PDFEvent, callback: Function) {\r\n        const wrapper = function (...args) {\r\n            callback(args);\r\n            PDFEvents.off(event, wrapper);\r\n        };\r\n        PDFEvents.on(event, wrapper);\r\n    }\r\n\r\n    /**\r\n     * Turn on an event callback for an event.\r\n     * @param event The name of the event\r\n     * @param callback The callback to turn on\r\n     */\r\n    public static on(event: PDFEvent, callback: Function) {\r\n        PDFEvents._EVENTS[event].on(callback);\r\n    }\r\n\r\n    /**\r\n     * Turn off an event callback for an event.\r\n     * @param event The name of the event\r\n     * @param callback The callback to turn off\r\n     */\r\n    public static off(event: PDFEvent, callback: Function) {\r\n        PDFEvents._EVENTS[event].off(callback);\r\n    }\r\n\r\n    public static fire(event: PDFEvent, ...args) {\r\n        if (PDFEvents.DEBUG) {\r\n            PDFLog.verbose(`Firing Event: ${event}`);\r\n            console.debug(args);\r\n        }\r\n        PDFEvents._EVENTS[event].fire(args);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\ntype ConsoleMessage = object | string | number | null;\r\ntype LogType = 'log' | 'warn' | 'error' | 'verbose';\r\n\r\n/**\r\n * A console logging wrapper that includes some additional information\r\n *  with output to help filter messages easier.\r\n */\r\nexport class PDFLog {\r\n    public static readonly PREFIX: string = 'PDFoundry';\r\n\r\n    private static format(message: ConsoleMessage) {\r\n        const time = new Date();\r\n\r\n        const pad = (n: number) => {\r\n            return n >= 10 ? n : `0${n}`;\r\n        };\r\n        const pad_ms = (n: number) => {\r\n            const s = n.toString();\r\n            return '0000'.substring(0, 4 - s.length) + s;\r\n        };\r\n\r\n        const hh = pad(time.getHours());\r\n        const mm = pad(time.getMinutes());\r\n        const ss = pad(time.getSeconds());\r\n        const ms = pad_ms(time.getMilliseconds());\r\n\r\n        return `[${PDFLog.PREFIX}@${hh}:${mm}:${ss}.${ms}] ${message}`;\r\n    }\r\n\r\n    /**\r\n     * Snapshot an object to preserve it's CURRENT state in console\r\n     * Otherwise consoles 'lazy load' objects, and it is very hard\r\n     *  to inspect their values when they were printed (sans breakpoints)\r\n     * @param value The object to snapshot\r\n     * @param level What logging level should be used\r\n     */\r\n    public static snapshot(value: object, level: LogType = 'log') {\r\n        const snap = JSON.parse(JSON.stringify(value));\r\n        let fn: Function;\r\n\r\n        switch (level) {\r\n            case 'log':\r\n                fn = console.log;\r\n                break;\r\n            case 'warn':\r\n                fn = console.warn;\r\n                break;\r\n            case 'error':\r\n                fn = console.error;\r\n                break;\r\n            case 'verbose':\r\n                fn = console.debug;\r\n                break;\r\n        }\r\n\r\n        fn(PDFLog.format(':: Frozen Object ::'));\r\n        fn(snap);\r\n    }\r\n\r\n    /**\r\n     * Print a log level message to console.\r\n     * @param message The message to print.\r\n     */\r\n    public static log(message: ConsoleMessage) {\r\n        if (typeof message === 'string' || typeof message === 'number') {\r\n            console.log(PDFLog.format(message));\r\n        } else {\r\n            console.log(PDFLog.format(':: Live Object ::'));\r\n            console.log(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Print an info level message to console.\r\n     * @param message The message to print.\r\n     */\r\n    public static info(message: ConsoleMessage) {\r\n        if (typeof message === 'string' || typeof message === 'number') {\r\n            console.info(PDFLog.format(message));\r\n        } else {\r\n            console.info(PDFLog.format(':: Live Object ::'));\r\n            console.info(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Print a verbose level message to console.\r\n     * @param message The message to print.\r\n     */\r\n    public static verbose(message: ConsoleMessage) {\r\n        if (typeof message === 'string' || typeof message === 'number') {\r\n            console.debug(PDFLog.format(message));\r\n        } else {\r\n            console.debug(PDFLog.format(':: Live Object ::'));\r\n            console.debug(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Print a warning level message to console.\r\n     * @param message The message to print.\r\n     */\r\n    public static warn(message: ConsoleMessage) {\r\n        if (typeof message === 'string' || typeof message === 'number') {\r\n            console.warn(PDFLog.format(message));\r\n        } else {\r\n            console.warn(PDFLog.format(':: Live Object ::'));\r\n            console.warn(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Print a error level message to console.\r\n     * @param message The message to print.\r\n     */\r\n    public static error(message: ConsoleMessage) {\r\n        if (typeof message === 'string' || typeof message === 'number') {\r\n            console.error(PDFLog.format(message));\r\n        } else {\r\n            console.error(PDFLog.format(':: Live Object ::'));\r\n            console.error(message);\r\n        }\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSetup } from './setup/PDFSetup';\r\nimport { PDFCache } from './cache/PDFCache';\r\nimport { PDFEvents } from './events/PDFEvents';\r\nimport { PDFI18n } from './settings/PDFI18n';\r\nimport { PDFSettings } from './settings/PDFSettings';\r\nimport { PDFLog } from './log/PDFLog';\r\nimport { PDFSetViewEvent } from './socket/events/PDFSetViewEvent';\r\nimport { PDFSocketHandler } from './socket/PDFSocketHandler';\r\n\r\nPDFSetup.registerSystem();\r\nPDFSetup.registerAPI();\r\n\r\nconst init = async () => {\r\n    // Inject the css into the page\r\n    PDFSetup.registerCSS();\r\n\r\n    PDFEvents.fire('init');\r\n\r\n    await setup();\r\n};\r\nconst setup = async () => {\r\n    // Initialize the cache system, creating the DB\r\n    await PDFCache.initialize();\r\n    // Load the relevant internationalization file.\r\n    await PDFI18n.initialize();\r\n\r\n    PDFEvents.fire('setup');\r\n};\r\nconst ready = async () => {\r\n    // Register the PDF sheet with the class picker, unregister others\r\n    PDFSetup.registerPDFSheet();\r\n    // Initialize the settings\r\n    await PDFSettings.registerSettings();\r\n\r\n    PDFSetup.userLogin();\r\n\r\n    PDFSocketHandler.registerHandlers();\r\n\r\n    PDFEvents.fire('ready');\r\n};\r\n\r\nHooks.once('setup', init);\r\nHooks.once('ready', ready);\r\n\r\n// <editor-fold desc=\"Persistent Hooks\">\r\n\r\n// preCreateItem - Setup default values for a new PDFoundry_PDF\r\nHooks.on('preCreateItem', PDFSettings.preCreateItem);\r\n// getItemDirectoryEntryContext - Setup context menu for 'Open PDF' links\r\nHooks.on('getItemDirectoryEntryContext', PDFSettings.getItemContextOptions);\r\n// renderSettings - Inject a 'Open Manual' button into help section\r\nHooks.on('renderSettings', PDFSettings.onRenderSettings);\r\n\r\n// </editor-fold>\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from './PDFSettings';\r\n\r\n/**\r\n * Localization helper\r\n */\r\nexport class PDFI18n {\r\n    /**\r\n     * Load the localization file for the user's language.\r\n     */\r\n    public static async initialize() {\r\n        const lang = game.i18n.lang;\r\n        // user's language path\r\n        const u_path = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/locale/${lang}/config.json`;\r\n        // english fallback path\r\n        const f_path = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/locale/en/config.json`;\r\n\r\n        let json;\r\n        try {\r\n            json = await $.getJSON(u_path);\r\n        } catch (error) {\r\n            // if no translation exits for the users locale the fallback\r\n            json = await $.getJSON(f_path);\r\n        }\r\n\r\n        for (const key of Object.keys(json)) {\r\n            game.i18n.translations[key] = json[key];\r\n        }\r\n\r\n        // setup the fallback as english so partial translations do not display keys\r\n        let fb_json = await $.getJSON(f_path);\r\n        for (const key of Object.keys(fb_json)) {\r\n            // @ts-ignore\r\n            game.i18n._fallback[key] = json[key];\r\n        }\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFItemSheet } from '../app/PDFItemSheet';\r\nimport { PDFoundryAPI } from '../api/PDFoundryAPI';\r\nimport { PDFLog } from '../log/PDFLog';\r\nimport { PDFCache } from '../cache/PDFCache';\r\nimport { PDFUtil } from '../api/PDFUtil';\r\nimport { PDFPreloadEvent } from '../socket/events/PDFPreloadEvent';\r\nimport { PDFData } from '../types/PDFData';\r\n\r\n/**\r\n * Internal settings and helper methods for PDFoundry.\r\n */\r\nexport class PDFSettings {\r\n    /**\r\n     * Are feedback notifications enabled? Disable if you wish\r\n     *  to handle them yourself.\r\n     */\r\n    public static NOTIFICATIONS: boolean = true;\r\n\r\n    public static DIST_FOLDER: string = 'pdfoundry-dist';\r\n    public static EXTERNAL_SYSTEM_NAME: string = '../modules/pdfoundry';\r\n    public static INTERNAL_MODULE_NAME: string = 'pdfoundry';\r\n    public static PDF_ENTITY_TYPE: string = 'PDFoundry_PDF';\r\n\r\n    public static HELP_SEEN_KEY: string = 'HelpSeen';\r\n\r\n    public static get SOCKET_NAME() {\r\n        return `system.${PDFSettings.EXTERNAL_SYSTEM_NAME}`;\r\n    }\r\n\r\n    /**\r\n     * Setup default values for pdf entities\r\n     * @param entity\r\n     * @param args ignored args\r\n     */\r\n    public static async preCreateItem(entity, ...args) {\r\n        PDFLog.verbose('Pre-create item.');\r\n        if (entity.type !== PDFSettings.PDF_ENTITY_TYPE) {\r\n            return;\r\n        }\r\n        entity.img = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/assets/pdf_icon.svg`;\r\n    }\r\n\r\n    /**\r\n     * Helper method to grab the id from the html object and return an item\r\n     * @param html\r\n     */\r\n    private static getItemFromContext(html: JQuery<HTMLElement>): Item {\r\n        const id = html.data('entity-id');\r\n        return game.items.get(id);\r\n    }\r\n\r\n    //TODO: This shouldn't be in settings.\r\n    /**\r\n     * Get additional context menu icons for PDF items\r\n     * @param html\r\n     * @param options\r\n     */\r\n    public static getItemContextOptions(html, options: any[]) {\r\n        PDFLog.verbose('Getting context options.');\r\n\r\n        if (game.user.isGM) {\r\n            options.unshift({\r\n                name: game.i18n.localize('PDFOUNDRY.CONTEXT.PreloadPDF'),\r\n                icon: '<i class=\"fas fa-download fa-fw\"></i>',\r\n                condition: (entityHtml: JQuery<HTMLElement>) => {\r\n                    const item = PDFSettings.getItemFromContext(entityHtml);\r\n                    if (item.type !== PDFSettings.PDF_ENTITY_TYPE) {\r\n                        return false;\r\n                    }\r\n\r\n                    const { url } = item.data.data;\r\n                    return url !== '';\r\n                },\r\n                callback: (entityHtml: JQuery<HTMLElement>) => {\r\n                    const item = PDFSettings.getItemFromContext(entityHtml);\r\n                    const pdf = PDFUtil.getPDFDataFromItem(item);\r\n\r\n                    if (pdf === null) {\r\n                        //TODO: Error handling\r\n                        return;\r\n                    }\r\n\r\n                    const { url } = pdf;\r\n                    const event = new PDFPreloadEvent(null, PDFUtil.getAbsoluteURL(url));\r\n                    event.emit();\r\n\r\n                    PDFCache.preload(url);\r\n                },\r\n            });\r\n        }\r\n\r\n        options.unshift({\r\n            name: game.i18n.localize('PDFOUNDRY.CONTEXT.OpenPDF'),\r\n            icon: '<i class=\"far fa-file-pdf\"></i>',\r\n            condition: (entityHtml: JQuery<HTMLElement>) => {\r\n                const item = PDFSettings.getItemFromContext(entityHtml);\r\n                if (item.type !== PDFSettings.PDF_ENTITY_TYPE) {\r\n                    return false;\r\n                }\r\n\r\n                const { url } = item.data.data;\r\n                return url !== '';\r\n            },\r\n            callback: (entityHtml: JQuery<HTMLElement>) => {\r\n                const item = PDFSettings.getItemFromContext(entityHtml);\r\n                const pdf = PDFUtil.getPDFDataFromItem(item);\r\n\r\n                if (pdf === null) {\r\n                    //TODO: Error handling\r\n                    return;\r\n                }\r\n\r\n                PDFoundryAPI.openPDF(pdf, 1);\r\n            },\r\n        });\r\n    }\r\n\r\n    public static registerSettings() {\r\n        PDFCache.registerSettings();\r\n    }\r\n\r\n    public static onRenderSettings(settings: any, html: JQuery<HTMLElement>, data: any) {\r\n        PDFLog.verbose('Rendering settings.');\r\n        const icon = '<i class=\"far fa-file-pdf\"></i>';\r\n        const button = $(`<button>${icon} ${game.i18n.localize('PDFOUNDRY.SETTINGS.OpenHelp')}</button>`);\r\n        button.on('click', PDFSettings.showHelp);\r\n\r\n        html.find('h2').last().before(button);\r\n    }\r\n\r\n    //TODO: Move out of help\r\n    public static async showHelp() {\r\n        await game.user.setFlag(PDFSettings.INTERNAL_MODULE_NAME, PDFSettings.HELP_SEEN_KEY, true);\r\n\r\n        const pdfData: PDFData = {\r\n            name: game.i18n.localize('PDFOUNDRY.MANUAL.Name'),\r\n            code: '',\r\n            offset: 0,\r\n            url: `${window.origin}/systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/assets/PDFoundry Manual.pdf`,\r\n            cache: false,\r\n        };\r\n\r\n        return PDFoundryAPI.openPDF(pdfData);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFItemSheet } from '../app/PDFItemSheet';\r\nimport { PDFoundryAPI } from '../api/PDFoundryAPI';\r\nimport { PDFLog } from '../log/PDFLog';\r\n\r\n/**\r\n * A collection of methods used for setting up the API & system state.\r\n */\r\nexport class PDFSetup {\r\n    /**\r\n     * Register the PDFoundry APi on the UI\r\n     */\r\n    public static registerAPI() {\r\n        ui['PDFoundry'] = PDFoundryAPI;\r\n    }\r\n\r\n    /**\r\n     * Inject the CSS file into the header, so it doesn't have to be referenced in the system.json\r\n     */\r\n    public static registerCSS() {\r\n        $('head').append(\r\n            $(`<link href=\"systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/${PDFSettings.DIST_FOLDER}/bundle.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\">`),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Pulls the system name from the script tags.\r\n     */\r\n    public static registerSystem() {\r\n        const scripts = $('script');\r\n        for (let i = 0; i < scripts.length; i++) {\r\n            const script = scripts.get(i) as HTMLScriptElement;\r\n            const folders = script.src.split('/');\r\n            const distIdx = folders.indexOf(PDFSettings.DIST_FOLDER);\r\n            if (distIdx === -1) continue;\r\n\r\n            if (folders[distIdx - 1] === 'pdfoundry') break;\r\n\r\n            PDFSettings.EXTERNAL_SYSTEM_NAME = folders[distIdx - 1];\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register the PDF sheet and unregister invalid sheet types from it.\r\n     */\r\n    public static registerPDFSheet() {\r\n        Items.registerSheet(PDFSettings.INTERNAL_MODULE_NAME, PDFItemSheet, {\r\n            types: [PDFSettings.PDF_ENTITY_TYPE],\r\n            makeDefault: true,\r\n        });\r\n\r\n        // Unregister all other item sheets for the PDF entity\r\n        const pdfoundryKey = `${PDFSettings.INTERNAL_MODULE_NAME}.${PDFItemSheet.name}`;\r\n        const sheets = CONFIG.Item.sheetClasses[PDFSettings.PDF_ENTITY_TYPE];\r\n        for (const key of Object.keys(sheets)) {\r\n            const sheet = sheets[key];\r\n            // keep the PDFoundry sheet\r\n            if (sheet.id === pdfoundryKey) {\r\n                continue;\r\n            }\r\n\r\n            // id is MODULE.CLASS_NAME\r\n            const [module] = sheet.id.split('.');\r\n            Items.unregisterSheet(module, sheet.cls, {\r\n                types: [PDFSettings.PDF_ENTITY_TYPE],\r\n            });\r\n        }\r\n    }\r\n\r\n    public static userLogin() {\r\n        let viewed;\r\n        try {\r\n            viewed = game.user.getFlag(PDFSettings.INTERNAL_MODULE_NAME, PDFSettings.HELP_SEEN_KEY);\r\n        } catch (error) {\r\n            viewed = false;\r\n        }\r\n\r\n        if (viewed) {\r\n            return;\r\n        }\r\n\r\n        PDFSettings.showHelp();\r\n    }\r\n}\r\n","import { PDFLog } from '../log/PDFLog';\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFSetViewEvent } from './events/PDFSetViewEvent';\r\nimport { PDFoundryAPI } from '../api/PDFoundryAPI';\r\nimport { PDFPreloadEvent } from './events/PDFPreloadEvent';\r\nimport { PDFCache } from '../cache/PDFCache';\r\n\r\nexport class PDFSocketHandler {\r\n    public static registerHandlers() {\r\n        // @ts-ignore\r\n        game.socket.on(PDFSettings.SOCKET_NAME, (event) => {\r\n            PDFLog.warn(`Incoming Event: ${event.type}`);\r\n            PDFLog.warn(event);\r\n\r\n            const { userIds, type, payload } = event;\r\n            // null = all users, otherwise check if this event effects us\r\n            if (userIds !== null && !userIds.includes(game.userId)) {\r\n                return;\r\n            }\r\n\r\n            if (type === PDFSetViewEvent.EVENT_TYPE) {\r\n                PDFSocketHandler.handleSetView(payload);\r\n                return;\r\n            } else if (type === PDFPreloadEvent.EVENT_TYPE) {\r\n                PDFSocketHandler.handlePreloadPDF(payload);\r\n                return;\r\n            } else {\r\n                if (type.includes('PDFOUNDRY')) {\r\n                    PDFLog.error(`Event of type ${type} has no handler.`);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static handleSetView(data: any) {\r\n        PDFoundryAPI.openPDF(data.pdfData, data.page);\r\n    }\r\n\r\n    public static handlePreloadPDF(data: any) {\r\n        PDFCache.preload(data.url);\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSocketEvent } from './PDFSocketEvent';\r\n\r\nexport class PDFPreloadEvent extends PDFSocketEvent {\r\n    public static get EVENT_TYPE() {\r\n        return `${super.EVENT_TYPE}/PRELOAD_PDF`;\r\n    }\r\n\r\n    get type() {\r\n        return PDFPreloadEvent.EVENT_TYPE;\r\n    }\r\n\r\n    public url: string;\r\n\r\n    constructor(userIds: string[] | null, url: string) {\r\n        super(userIds);\r\n\r\n        this.url = url;\r\n    }\r\n\r\n    protected getPayload(): any {\r\n        const payload = super.getPayload();\r\n        payload.url = this.url;\r\n        return payload;\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSocketEvent } from './PDFSocketEvent';\r\nimport { PDFData } from '../../types/PDFData';\r\n\r\nexport class PDFSetViewEvent extends PDFSocketEvent {\r\n    public static get EVENT_TYPE() {\r\n        return `${super.EVENT_TYPE}/SET_VIEW`;\r\n    }\r\n\r\n    get type() {\r\n        return PDFSetViewEvent.EVENT_TYPE;\r\n    }\r\n\r\n    public page: number;\r\n    public pdfData: PDFData;\r\n\r\n    constructor(userIds: string[] | null, pdfData: PDFData, page: number) {\r\n        super(userIds);\r\n\r\n        this.pdfData = pdfData;\r\n        this.page = page;\r\n    }\r\n\r\n    protected getPayload() {\r\n        const payload = super.getPayload();\r\n        payload.pdfData = this.pdfData;\r\n        payload.page = this.page;\r\n        return payload;\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from '../../settings/PDFSettings';\r\n\r\nexport abstract class PDFSocketEvent {\r\n    /**\r\n     * The type of this event.\r\n     */\r\n    public static get EVENT_TYPE() {\r\n        return 'PDFOUNDRY';\r\n    }\r\n\r\n    /**\r\n     * The type of this event.\r\n     */\r\n    public abstract get type();\r\n\r\n    /**\r\n     * The user ids that should handle this event.\r\n     */\r\n    protected userIds: string[] | null;\r\n\r\n    protected constructor(userIds: string[] | null) {\r\n        this.userIds = userIds;\r\n    }\r\n\r\n    /**\r\n     * Get any data that will be sent with the event.\r\n     */\r\n    protected getPayload(): any {\r\n        return {};\r\n    }\r\n\r\n    public emit() {\r\n        // @ts-ignore\r\n        game.socket.emit(PDFSettings.SOCKET_NAME, {\r\n            type: this.type,\r\n            userIds: this.userIds,\r\n            payload: this.getPayload(),\r\n        });\r\n    }\r\n}\r\n","/* Copyright 2020 Andrew Cuccinello\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { PDFSettings } from '../settings/PDFSettings';\r\nimport { PDFEvents } from '../events/PDFEvents';\r\nimport { PDFData } from '../types/PDFData';\r\nimport { PDFjsViewer } from '../types/PDFjsViewer';\r\nimport { PDFLog } from '../log/PDFLog';\r\nimport { PDFSetViewEvent } from '../socket/events/PDFSetViewEvent';\r\nimport { PDFUtil } from '../api/PDFUtil';\r\nimport { PDFjsEventBus } from '../types/PDFjsEventBus';\r\n\r\nexport class PDFViewer extends Application {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['app', 'window-app', 'pdfoundry-viewer'];\r\n        options.template = `systems/${PDFSettings.EXTERNAL_SYSTEM_NAME}/pdfoundry-dist/templates/app/pdf-viewer.html`;\r\n        options.title = game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF');\r\n        options.width = 8.5 * 100 + 64;\r\n        options.height = 11 * 100 + 64;\r\n        options.resizable = true;\r\n        return options;\r\n    }\r\n\r\n    protected _frame: HTMLIFrameElement;\r\n    protected _viewer: PDFjsViewer;\r\n    protected _eventBus: PDFjsEventBus;\r\n    protected _pdfData: PDFData;\r\n\r\n    constructor(pdfData?: PDFData, options?: ApplicationOptions) {\r\n        super(options);\r\n\r\n        if (pdfData === undefined) {\r\n            pdfData = {\r\n                name: game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF'),\r\n                code: '',\r\n                offset: 0,\r\n                url: '',\r\n                cache: false,\r\n            };\r\n        }\r\n\r\n        this._pdfData = pdfData;\r\n    }\r\n\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    /**\r\n     * Returns a copy of the PDFData this viewer is using.\r\n     * Changes to this data will not reflect in the viewer.\r\n     */\r\n    public get pdfData() {\r\n        return duplicate(this._pdfData);\r\n    }\r\n\r\n    public get page() {\r\n        return this._viewer.page;\r\n    }\r\n\r\n    public set page(value: number) {\r\n        this._viewer.page = value;\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    // <editor-fold desc=\"Foundry Overrides\">\r\n\r\n    get title(): string {\r\n        let title = this._pdfData.name;\r\n        if (this._pdfData.code !== '') {\r\n            title = `${title} (${this._pdfData.code})`;\r\n        }\r\n        return title;\r\n    }\r\n\r\n    protected _getHeaderButtons(): any[] {\r\n        const buttons = super._getHeaderButtons();\r\n        //TODO: Standardize this to function w/ the Item sheet one\r\n        buttons.unshift({\r\n            class: 'pdf-sheet-github',\r\n            icon: 'fas fa-external-link-alt',\r\n            label: 'PDFoundry',\r\n            onclick: () => window.open('https://github.com/Djphoenix719/PDFoundry', '_blank'),\r\n        });\r\n\r\n        if (game.user.isGM) {\r\n            //TODO: Show to individual players.\r\n            buttons.unshift({\r\n                class: 'pdf-sheet-show-players',\r\n                icon: 'fas fa-eye',\r\n                label: 'Show to Players',\r\n                onclick: () => this.showToPlayers(),\r\n            });\r\n        } else {\r\n            buttons.unshift({\r\n                class: 'pdf-sheet-show-gm',\r\n                icon: 'fas fa-eye',\r\n                label: 'Show to GM',\r\n                onclick: () => this.showToGM(),\r\n            });\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n    getData(options?: any): any | Promise<any> {\r\n        const data = super.getData(options);\r\n        data.systemName = PDFSettings.EXTERNAL_SYSTEM_NAME;\r\n        return data;\r\n    }\r\n\r\n    protected async activateListeners(html: JQuery<HTMLElement>): Promise<void> {\r\n        super.activateListeners(html);\r\n\r\n        this._frame = html.parent().find('iframe.pdfViewer').get(0) as HTMLIFrameElement;\r\n        this.getViewer().then(async (viewer) => {\r\n            this._viewer = viewer;\r\n\r\n            this.getEventBus().then((eventBus) => {\r\n                this._eventBus = eventBus;\r\n\r\n                // const listeners = eventBus._listeners;\r\n                // for (const eventName of Object.keys(listeners)) {\r\n                //     eventBus.on(eventName, (...args) => {\r\n                //         this.logEvent(eventName, args);\r\n                //     });\r\n                // }\r\n\r\n                // Fire the viewerReady event so the viewer may be used externally\r\n                PDFEvents.fire('viewerReady', this);\r\n            });\r\n        });\r\n    }\r\n\r\n    private logEvent(key: string, ...args) {\r\n        console.debug(key);\r\n        console.debug(args);\r\n    }\r\n\r\n    async close(): Promise<any> {\r\n        PDFEvents.fire('viewerClose', this);\r\n        return super.close();\r\n    }\r\n\r\n    // </editor-fold>\r\n\r\n    /**\r\n     * Show the current page to GMs.\r\n     */\r\n    private showToGM() {\r\n        const pdfData = this.pdfData;\r\n        pdfData.offset = 0;\r\n\r\n        // @ts-ignore\r\n        const ids = PDFUtil.getUserIdsOfRole(USER_ROLES.GAMEMASTER);\r\n        const page = this.page;\r\n\r\n        const event = new PDFSetViewEvent(ids, pdfData, page);\r\n        event.emit();\r\n    }\r\n\r\n    /**\r\n     * Show the current page to players.\r\n     */\r\n    private showToPlayers() {\r\n        const pdfData = this.pdfData;\r\n        pdfData.offset = 0;\r\n\r\n        // @ts-ignore\r\n        const ids = PDFUtil.getUserIdsAtMostRole(USER_ROLES.ASSISTANT);\r\n        const page = this.page;\r\n\r\n        const event = new PDFSetViewEvent(ids, pdfData, page);\r\n        event.emit();\r\n    }\r\n\r\n    /**\r\n     * Wait for the internal PDFjs viewer to be ready and usable.\r\n     */\r\n    private getViewer(): Promise<PDFjsViewer> {\r\n        if (this._viewer) {\r\n            return Promise.resolve(this._viewer);\r\n        }\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            let timeout;\r\n            const returnOrWait = () => {\r\n                // If our window has finished initializing...\r\n                if (this._frame) {\r\n                    // If PDFjs has finished initializing...\r\n                    if (this._frame.contentWindow && this._frame.contentWindow['PDFViewerApplication']) {\r\n                        const viewer = this._frame.contentWindow['PDFViewerApplication'];\r\n                        resolve(viewer);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // If any ifs fall through, try again in a few ms\r\n                timeout = setTimeout(returnOrWait, 5);\r\n            };\r\n            returnOrWait();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Wait for the internal PDFjs eventBus to be ready and usable.\r\n     */\r\n    private getEventBus(): Promise<PDFjsEventBus> {\r\n        if (this._eventBus) {\r\n            return Promise.resolve(this._eventBus);\r\n        }\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n            this.getViewer().then((viewer) => {\r\n                let timeout;\r\n                const returnOrWait = () => {\r\n                    if (viewer.eventBus) {\r\n                        resolve(viewer.eventBus);\r\n                        return;\r\n                    }\r\n                    timeout = setTimeout(returnOrWait, 5);\r\n                };\r\n                returnOrWait();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Finish the download and return the byte array for the file.\r\n     */\r\n    public download(): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>(async (resolve, reject) => {\r\n            const viewer = await this.getViewer();\r\n            let timeout;\r\n            const returnOrWait = () => {\r\n                if (viewer.downloadComplete) {\r\n                    resolve(viewer.pdfDocument.getData());\r\n                    return;\r\n                }\r\n\r\n                timeout = setTimeout(returnOrWait, 50);\r\n            };\r\n            returnOrWait();\r\n        });\r\n    }\r\n\r\n    public async open(pdfSource: string | Uint8Array, page?: number) {\r\n        const pdfjsViewer = await this.getViewer();\r\n\r\n        if (page) {\r\n            pdfjsViewer.initialBookmark = `page=${page}`;\r\n        }\r\n\r\n        await pdfjsViewer.open(pdfSource);\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}